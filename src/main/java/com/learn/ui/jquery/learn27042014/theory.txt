From JQEURY.COM  (you may play here - http://jsfiddle.net/buHTm/)

There are 2 types of methods in jquery: ran on objects (they return and send 'this' object always)
and utility methods (ran on '$'). Their return types and in params are vary.


document ready - we need to run the code inside this function, in order to give browser an
oppotunity to load all frames and elements.

$( document ).ready(function() {
    console.log( "ready!" );
});

also it has a shorthand:

$(function() {
    console.log( "ready!" );
});

You can pass a normal function (instead of anonymous function)

$( document ).ready( readyFn );
// or:
$( window ).load( readyFn );


To avoid possible conflicts with other libraries pass '$' as parameter to anonymous function.

jQuery( document ).ready(function( $ ) {
// You can use the locally-scoped $ in here as an alias to jQuery.
$( "div" ).hide();
});


with help of attr() method we can either get or set value of the element depending on number of
params;



$( "a" ).attr( "href", "allMyHrefsAreTheSameNow.html" );
$( "a" ).attr({
title: "all titles are the same too!",
href: "somethingNew.html"
});


You can SELECT with:

-id $( "#myId" ); // Note IDs must be unique per page
-class $( ".myClass" );
- $( "input[name='first_name']" ); // Beware, this can be very slow in older browsers
- by compound css selector  $( "#contents ul.people li" );
- pseudo selectors
$( "a.external:first" );
$( "tr:odd" );
// Select all input-like elements in a form (more on this below).
$( "#myForm :input" );
$( "div:visible" );
// All except the first three divs.
$( "div:gt(2)" );
// All currently animated divs.
$( "div:animated" );


jQuery doesn't cache elements for you. If you've made a selection that you might need to make again,
you should save the selection in a variable rather than making the selection repeatedly.

var divs = $( "div" );


Sometimes the selection contains more than what you're after. jQuery offers several methods for refining and filtering selections.

// Refining selections.
$( "div.foo" ).has( "p" ); // div.foo elements that contain <p> tags
$( "h1" ).not( ".bar" ); // h1 elements that don't have a class of bar
$( "ul li" ).filter( ".current" ); // unordered list items with class of current
$( "ul li" ).first(); // just the first unordered list item
$( "ul li" ).eq( 5 ); // the sixth


To select form elements:
$( "form :button" );

$( "form :disabled" );
In order to get the best performance using :disabled, first select elements with a standard jQuery selector,
then use .filter( ":disabled" ), or precede the pseudo-selector with a tag name or some other selector.




// The .html() method used as a setter:
$( "h1" ).html( "hello world" );

// The .html() method used as a getter:
$( "h1" ).html();

Setters return a jQuery object, allowing you to continue calling jQuery methods on your selection.
Getters return whatever they were asked to get, so you can't continue to call jQuery methods on the
value returned by the getter.


Chaining
$( "#content" ).find( "h3" ).eq( 2 ).html( "new text for the third h3!" );

jQuery also provides the .end() method to get back to the original selection should you change
the selection in the middle of a chain:

$( "#content" )
.find( "h3" )
.eq( 2 )
.html( "new text for the third h3!" )
.end() // Restores the selection to all h3s in #content
.eq( 0 )
.html( "new text for the first h3!" );


Methods which allow to change or get values of elements:

    .html() – Get or set the HTML contents.
    .text() – Get or set the text contents; HTML will be stripped.
    .attr() – Get or set the value of the provided attribute.
    .width() – Get or set the width in pixels of the first element in the selection as an integer.
    .height() – Get or set the height in pixels of the first element in the selection as an integer.
    .position() – Get an object with position information for the first element in the selection,
    relative to its first positioned ancestor. This is a getter only.
    .val() – Get or set the value of form elements.


<<<<<<< HEAD
you can copy element with clone() method
$( "#myList li:first" ).clone().appendTo( "#myList" );
=======
 In JQuery there are several utility methods you can call on $

 - trim
 - each()
$.each([ "foo", "bar", "baz" ], function( idx, val ) {
console.log( "element " + idx + " is " + val );
});
$.each({ foo: "bar", baz: "bim" }, function( k, v ) {
console.log( k + " : " + v );
});

-$.inArray()
Returns a value's index in an array, or -1 if the value is not in the array:

var myArray = [ 1, 2, 3, 5 ];
if ( $.inArray( 4, myArray ) !== -1 ) {
console.log( "found it!" );
}

-$.extend()
Changes the properties of the first object using the properties of subsequent objects:
If you don't want to change any of the objects you pass to $.extend(), pass an empty object
as the first argument:

- $.proxy()
Returns a function that will always run in the provided scope — that is, sets the
meaning of this inside the passed function to the second argument.


$.each() is a generic iterator function for looping over object, arrays, and array-like objects.
Plain objects are iterated via their named properties while arrays and array-like objects are
iterated via their indices.


// Incorrect:
$.each( $( "p" ), function() {
// Do something
});
For jQuery collections, use .each().

<ul>
<li><a href="#">Link 1</a></li>
<li><a href="#">Link 2</a></li>
<li><a href="#">Link 3</a></li>
</ul>







>>>>>>> 31bf47affbe11492f090d5304d7bf2064a578239


you can create an element
$( "<p>This is a new paragraph</p>" );

Checking the .length property is a common way to ensure that the selector successfully
matched one or more elements.

to get the first h1 on the page
var headings = $( "h1" );
var firstHeading = headings.eq( 0 );

to get actual object (not jquery object)
$( "div" ).get(1)

// Selecting only the first <h1> element on the page (alternate approach).
var firstHeadingElem = $( "h1" )[ 0 ];

In either case, firstHeadingElem contains the native DOM element.
This means it has DOM properties like .innerHTML and methods like .appendChild(),
but not jQuery methods like .html() or .after().

alert( $( "#logo" ) === $( "#logo" ) ); - every jquery object is unique, even if
it is selected from the same element

jQuery Objects Are Not "Live"
you have to run selection again if number of 'p' elements increased



// Working with classes.
var h1 = $( "h1" );
h1.addClass( "big" );
h1.removeClass( "big" );
h1.toggleClass( "big" );
if ( h1.hasClass( "big" ) ) {
...
}


// Getting CSS properties.
$( "h1" ).css( "fontSize" ); // Returns a string such as "19px".
$( "h1" ).css( "font-size" ); // Also works.


// Setting CSS properties.
$( "h1" ).css( "fontSize", "100px" ); // Setting an individual property.
// Setting multiple properties.
$( "h1" ).css({
fontSize: "100px",
color: "red"
});



There's often data about an element you want to store with the element.
In plain JavaScript, you might do this by adding a property to the DOM element,
but you'd have to deal with memory leaks in some browsers.
jQuery offers a straightforward way to store data related to an element,
and it manages the memory issues for you.


Data element example:

$( "li" ).each(function() {
var li = $( this );
var div = li.find( "div" );
li.data( "contentDiv", div );
});
// Later, we don't have to find the div again;
// we can just read it from the list item's data
var firstLi = $( "li" ).eq(2);
firstLi.data( "contentDiv" ).html( "new content" );

In addition to passing .data() a single key-value pair to store data, you can also
pass an object containing one or more pairs.

