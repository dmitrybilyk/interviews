Самым распространённым способом кодирования сейчас является использование для одного символа
одного байта (8 бит), что определяет общее кол-во символов в 256. Набор первых 128 символов
стандартизован (набор ASCII) и является одинаковыми во всех распространённых кодировках
(те кодировки, где это не так уже практически вышли из употребления). Англицкие буковки и
символы пунктуации находятся в этом диапазоне, что и определяет их поразительную живучесть
в компьютерных системах :-). Другие языки находятся не в столь счастливом положении -
им всем приходится ютиться в оставшихся 128 числах.
В Юникод входит кирилица.
Когда данные читаются извне или передаются наружу, то они могут быть представлены
только одним типом - типом byte. Все прочие типы конструируются из байтов в зависимости от
используемого формата данных. Вот тут то на сцену и выходят кодировки - в Java это просто
формат данных для передачи символов, который используется для формирования данных типа char.
Для каждой кодовой страницы в библиотеке имеется по 2 класса перекодировки (ByteToChar и
CharToByte). Классы эти лежат в пакете sun.io. Если, при перекодировке из char в byte не
было найдено соответствующего символа, он заменяется на символ ?.
Начиная с 1.4 появилось новое API (пакет java.nio.charset), при помощи которого Вы уже
можете создать свою собственную кодировку (например поддержать редко используемую, но
жутко необходимую именно Вам).
По умолчанию она зависит от системы и её настроек (для русских виндов принята кодировка Cp1251),
и в старых JDK её можно изменить установкой системного свойства file.encoding. Но это не
всегда срабатывает.
ISO-8859-1 один в один соответствует первым 256 значениям Unicode. (это также диапазон, куда
входит char). StringBuffer ограничен этим диапазоном.

Восьмибитовые кодироки русских букв:
 - Cp1251, синонимы: Windows-1251 ANSI
 - Cp866, синонимы:IBM866 IBM-866  866  CP866   CSIBM866
 - KOI8_R, синонимы:    KOI8-R   KOI8   CSKOI8R
 - ISO8859_5, синонимы:    ISO8859-5   ISO-8859-5   ISO_8859-5   ISO_8859-5:1988
    ISO-IR-144   8859_5   Cyrillic   CSISOLatinCyrillic   IBM915   IBM-915   Cp915   915

Так же как и байты концептуально отделены от символов, в Java различаются потоки байтов и
потоки символов. Работу с байтами представляют классы, которые прямо или косвенно наследуют
классы InputStream или OutputStream (плюс класс-уникум RandomAccessFile). Работу с символами
представляет сладкая парочка классов Reader/Writer (и их наследники, разумеется).
Для чтения/записи не преобразованных байтов используются потоки байтов. Если известно, что
байты представляют собой только символы в некоторой кодировке, можно использовать
специальные классы-преобразователи InputStreamReader и OutputStreamWriter, чтобы получить
поток символов и работать непосредственно с ним. Обычно это удобно в случае обычных
текстовых файлов или при работе с многими сетевыми протоколами Internet. Кодировка символов
при этом указывается в конструкторе класса-преобразователя.
Если в потоке могут присутствовать данные в разных кодировках или же символы перемешаны с
прочими двоичными данными, то лучше читать и записывать массивы байтов (byte[]), а для
перекодировки использовать уже упомянутые методы класса String.
string.getBytes("Cp1251")

Консоль в Java традиционно представлена потоками, но, к сожалению, не символов, а байтов.
Когда Вы записываете в него строку (в поток байтов, в объект PrintStream), внутри происходит конвертация в байты с
использованием кодировки по умолчанию, что в случае виндов, как правило, неприемлемо -
кодировка по умолчанию будет Cp1251 (Ansi), а для консольного окна обычно нужно использовать
Cp866 (OEM).

Удобнее всего обычно формат UTF8 - первые 128 значений (ASCII) в нём кодируются одним байтом,
что часто может значительно уменьшить общий объём данных (не зря эта кодировка принята за
основу в мире XML). Но у UTF8 есть один недостаток - кол-во требуемых байтов зависит от
кода символов. Там, где это критично можно использовать один из двухбайтовых форматов
Unicode (UnicodeBig или UnicodeLittle).




