//Threads: so called lightweight processes which have their own call stack but can access
// shared data. Every thread has its own memory cache. If a thread reads shared data it
// stores this data in its own memory cache. A thread can re-read the shared data.
//Java provides locks to protect certain parts of the coding to be executed by several
// threads at the same time. The simplest way of locking a certain method or Java
// class is to define the method or class with the synchronized keyword.

//    The synchronized keyword in Java ensures:
//that only a single thread can execute a block of code at the same time
//that each thread entering a synchronized block of code sees the effects of all
//previous modifications that were guarded by the same lock
//Synchronization is necessary for mutually exclusive access to blocks of code  and for
reliable communication between threads.
// You can use the synchronized keyword for the definition of a method. This would
// ensure that only one thread can enter this method at the same time. Another threads
// which is calling this method would wait until the first threads leaves this method.
// You can also use the synchronized keyword to protect blocks of code within a method.
// This block is guarded by a key, which can be either a string or an object.
// This key is called the lock. All code which is protected by the same lock can only
// be executed by one thread at the same time
// If a variable is declared with the volatile keyword then it is guaranteed that any
// thread that reads the field will see the most recently written value. The volatile
// keyword will not perform any mutual exclusive lock on the variable.
// An atomic operation is an operation which is performed as a single unit of work without
the possibility of interference from other operations.

//The Java language specification guarantees that reading or writing a variable is an
// atomic operation(unless the variable is of type long or double). Operations variables
// of type long or double are only atomic if they declared with the volatile keyword.
//The i++ operation first reads the value which is currently stored in i (atomic operations)
// and then it adds one to it (atomic operation). But between the read and the write the
// value of i might have changed.
//Since Java 1.5 the java language provides atomic variables, e.g. AtomicInteger or
// AtomicLong which provide methods like getAndDecrement(), getAndIncrement() and
// getAndSet() which are atomic.
//The Java memory model guarantees by the that each thread entering a synchronized block
// of code sees the effects of all previous modifications that were guarded by the same lock.
//The simplest way to avoid problems with concurrency is to share only immutable data
//between threads. Immutable data is data which cannot changed.
//An immutable class may have some mutable data which is uses to manages its state but from the
outside this class nor any attribute of this class can get changed.

//For all mutable fields, e.g. Arrays, that are passed from the outside to the class
// during the construction phase, the class needs to make a defensive-copy of the elements
// to make sure that no other object from the outside still can change the data
// you should copy data you receive and only return copies of data to calling code.

//    The base means for concurrency are is the java.lang.Threads class.
// A Thread executes an object of type java.lang.Runnable.
//Runnable is an interface with defines the run() method. This method is called by the
//Thread object and contains the work which should be done. Therefore the "Runnable"
// is the task to perform. The Thread is the worker who is doing this task.


A thread pool can be described as a collection of Runnable objects (work queue) and a
connections of running threads. These threads are constantly running and are checking the
work query for new work. If there is new work to be done they execute this Runnable.
The Thread class itself provides a method, e.g. execute(Runnable r) to add a new Runnable
object to the work queue.

The executor framework presented in the last chapter works with Runnables.
Runnable do not return result.
In case you expect your threads to return a computed result you can use
java.util.concurrent.Callable. The Callable object allows to return values after competition.
The Callable object uses generics to define the type of object which is returned.


One way to create a thread in java is to implement the Runnable Interface and then
instantiate an object of the class. We need to override the run() method into our
class which is the only method that needs to be implemented. The run() method
contains the logic of the thread.


The procedure for creating threads based on the Runnable interface is as follows:

1. A class implements the Runnable interface, providing the run() method that will be
executed by the thread. An object of this class is a Runnable object.

2. An object of Thread class is created by passing a Runnable object as argument to
the Thread constructor. The Thread object now has a Runnable object that implements the run() method.

3. The start() method is invoked on the Thread object created in the previous step.
The start() method returns immediately after a thread has been spawned.

4. The thread ends when the run() method ends, either by normal completion or by
throwing an uncaught exception.

Extending Thread Class

1. A class extending the Thread class overrides the run() method from the Thread class to define
the code executed by the thread.

2. This subclass may call a Thread constructor explicitly in its constructors to
initialize the thread, using the super() call.

3. The start() method inherited from the Thread class is invoked on the object of
the class to make the thread eligible for running.

Below is a program that illustrates instantiation and running of threads by extending
the Thread class instead of implementing the Runnable interface. To start the thread
you need to invoke the start() method on your object.


When creating threads, there are two reasons why implementing the Runnable interface
may be preferable to extending the Thread class:
Extending the Thread class means that the subclass cannot extend any other class,
whereas a class implementing the Runnable interface
has this option.
A class might only be interested in being runnable, and therefore, inheriting the
full overhead of the Thread class would be excessive.


If only deamons exist java shutdowned automatically.
If there are no user threads deamon will die. Even if it doesn't finish
it's job.


