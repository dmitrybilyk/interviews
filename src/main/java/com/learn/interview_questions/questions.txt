Please check the following skills:

Java,
Spring Boot,
SQL
English skills


1......... What are the major features of Java programming?
- Object-Oriented;
- Platform Independent;
- Secure;
- Multithreaded;
- High Performance (JIT - improves performance, compiles not all code at once. Especially for big projects);

2......... What is a byte code?
- it is a machine code in form of the .class file, instructions for the JVM, it's existence makes java platform independent
- JVM interprets the byte code and turns it into machine code to be executed on the processor
- write once, read anywhere

3......... Which principles of OOP do you know?
a) Abstraction
Abstraction is the process of modeling real world objects into programming language.
Hence interfaces and abstract classes are just two techniques used in this process.
We don't show the implementation details to the user, but just show him what he needs.
It's kind of 'details hiding'.

b) Encapsulation.
It's kind of data hiding. It's the process of binding together the code and data it manipulates.
It's the hiding of some important data with providing the interface to manipulate it in secure way.

c) Inheritance.
inheritance is the ability of a class to inherit data and behaviors from another class.
Note that only public and protected members of the superclass are inherited by
the subclass. The subclass can freely add new members to extend features of the superclass.
Inheritance is for reusing code. Using inheritance promotes the maintainability of the code.
Another reason for implementing inheritance is for the purpose of extensibility

What is association:
Association defines how objects related to each other, know each other and use each other's functionality.
Two forms of association:
- composition - It is a “belongs-to” type of association. it's 'has-a' relationship
- aggregation - also 'has-a' relationship but here objects could exist independently

d) Polymorphism.
Polymorphism means ‘many forms’. In OOP, polymorphism means a type can point to
different object at different time. In other words, the actual object to which
a reference type refers, can be determined at runtime.

Polymorphism is a robust feature of OOP. It increases the reusability,
flexibility and extensibility of code. Take the above example for instance:
Reusability: the teach() method can be re-used for different kinds of objects as
long as they are sub types of the Animal interface.
Flexibility: the actual object can be determined at runtime which allows the code
run more flexibly.
Extensibility: when we want to add a new kind of Animal, e.g. Snake, we just pass
an object of Snake into the teach() method without any modification.

4......... In which forms inheritance could be implemented in Java?

In Java, inheritance can be implemented in three forms:
- A class inherits another class
- A class implements another interface
- An interface inherits another interface

5......... Which types of Polymorphism exist in Java?
1) static - methods overloading
2) dynamic - methods overriding

6......... What is the difference between interface and abstract class. When would you prefer to use
abstract class?
- can abstract class have non-abstract methods? Can class extend several abstract classes?
Summing up, we can say that the major difference between an abstract class and an
interface is the methods they contain (completed versus uncompleted) and their
contents (a real class vs. an empty template)

7......... What can you say about the fields in interfaces. Which modifiers are applied to them by default?
All fields in interface are public static final, i.e. they are constants.

8......... Which class is the parent of all classes in java.
Please list the methods of Object class in java.

9......... What are enums in Java?
Enums are group of named constants. Enum implicitely extends ENUM class.
Elements of enum could have variables and methods, Enum class could have constructor.
Enum allows guarantee type safety.

- clone - how to use this method? Which issues could happen with cloning? How to resolve them?
- equals - rules while overriding equals and hashcode

Equals method is used to compare objects of the same type. By default it's implemented (in Object class) to
compare by references in memory (with == sign). Overriding equals affects how object would be used in collections for
instance. If you override the equals you also need to override hashcode method.

9......... Principles of equals method:
- reflexivity - a.equals(a) should always return true
- simmetricity - if a.equals(b) == true then b.equals(a) == true
- transitivity - if a equals b and b equals c then a equals c
- consistency - Multiple runs of a.equals(b) should return the same result (provided any field is changed (which
participates in equals calculation))
if a != null then a.equals(null) will always return false

- hashcode

hashcode method calculates the hashcode of the object. The same fields should participate as fields in equals method.

10..........Principles of hashcode method:
- multiple runs of hachcode method on the same object will return the same result (provided no any effective field
is changed). Also runnings on different executions of application could return different hachcode
- if 2 objects are equals then hashcode should also be equal, but if objects are not equal then hashcode could
return the same value. And this is not good because this could lead to collisions in hash structure (hashset or hashmap).

- notify -
- notifyAll
- toString
- wait

11......... Exception hierarchi. Which types of exceptions exist, difference between them.
Which operators to use, is it recommended to use them to control the flow of the
program, what are the best practices regarding exceptions handling?
Examples of checked/unchecked
exceptions.

/home/dmitry/dev/projects/interviews/src/main/java/com/learn/core/exceptions/theory
/home/dmitry/dev/projects/interviews/src/main/java/com/learn/core/exceptions/exceptionhierarchy3.png


12......... Which data structures do you know?
Array, LinkedList, Queue, Stack, tree, graph

13......... Collections hierarchi.
/home/dmitry/dev/projects/interviews/src/main/java/com/learn/core/collections/CollectionsStructure.png

14......... Compare ArrayList and LinkedList
Get (search) will be fast on ArrayList - o(1) - constant. On LinkedList get is o(n) in the middle as it needs to
iterate via all elements (from end or from start, depends on target index value).
Removal in ArrayList is constant just for the case of last element as it doesn't need to re-index other elements.
LinkedList will search with constant time for first or last elements.

Deletion for ArrayList is constant just for the last element as it doesn't need to re-index elements.
LinkedList is linear for the middle element and constant for first and last.

LinkedList is preferable just in case if you need to often insert or delete on first or last element.
ArrayList is more convenient for processor regarding it's caches.


15.......... Do you know any searching or sorting algorithms? Please name algorithms you remember.

Searching:
- Linear search (one by one from let till the end);
- Binary search (sort and then get element from middle and consider appropriate side until you find the element)

Sorting:
- Selection sort (we have initial array and take element one by one and put them to another array in ascending order
for instance. At the same time we take elements one by one from unsorted array)
- Bubble sort (swapping elements one by one with comparison closely related elements until we don't need to swap anymore)
The key process in quickSort is partition(). Target of partitions is, given an array and an element x of array as pivot,
put x at its correct position in sorted array and put all smaller elements (smaller than x) before x, and put all
greater elements (greater than x) after x.

16........... How hashmap works internally? What is collision? how to get rid of collisions?
What if keys of 2 objects are equal?

HashMap. There is an Entry interface in Map interface. Node from HashMap is an implementor of it.
Inside HashMap there is an array of type Node - Node[]. To determine to which node to put the value
hashing is used. This means index to where to put Node is calculated based on hash value (hashcode of key is used here)
and size of array.
If there is a collision (hash and key are different but index is the same) then Entries (Nodes) are persisted as a
linked list (every element has link to the next element of the bucket). If hash and key is the same then value is just
replaced. The better hashcode and equals are implemented the more evenly elements will be placed to nodes - less
collisions > better performance. If collision happens new elements are added to the beginning of the linked list.
Default size of Node[] is 16 and increase capacity is 0.75. If capacity is full then size is two times increased and indexes
of all elements are recalculated.
If we add a lot of elements to HashMap and at once remove them the size of map will not be decreased to initial value.
(ArrayList has method 'trimToSize()' for such cases). The only thing we can do is to created new map and send current as
a parameter.


17......... What will happen if you iterate the ArrayList and remove element at the same time? Provide an
example of fail-safe collection, please?
Fail-fast collection (like ArrayList) will throw a ConcurrentModificationException exception if we remove element while we iterating it.
But it will not fail if we remove element on iterator object itself.
Fail-safe collection (like CopyOnWriteArrayList) will work with snapshot of original collection inside so it will
not throw an exception (but it takes more memory and state of collection is not up-to-date while iteration).

18.......... Inner Classes
- regular inner
- static inner
- local inner
- anonymous inner

19. Generics
- are types in Java variant? Are generic types variant?
We have a Human as a parent class and Student as a Child class.
Can we create the object like this:
List<Human> humans = new ArrayList<Student>

What is covariance?
What is contravariance?

What is Producer Extends Consumer Super. In which cases we need to use 'super T'?

19.......... Java 8 features
/home/dmitry/dev/projects/interviews/src/main/java/com/learn/core/Java8Features/Java8Main.java

20.......... Inner classes

21.......... What is a multithreading in java? How to create a thread in java?
- What is a thread?
Threads are lightweight processes within processes as seen

- Ways to create a thread?
extending Thread, implementing Runnable

- What are Different Types of threads in Java?
user thread, daemon thread (cease to exist when the main thread terminates, for background tasks)

- What is the difference between synchronized and ReentrantLock in Java?
ReentrantLock provides additional functionality over the use of synchronized methods and statements.
Provides a non-blocking attempt to acquire a lock using tryLock() method that acquires the lock only if it is not
held by another thread at the time of invocation.
Provides a feature to acquire the lock that can be interrupted using lockInterruptibly() method that acquires the
lock unless the current thread is interrupted.
Provides a feature to acquire the lock that can timeout using the tryLock(long timeout, TimeUnit unit) method that
acquires the lock if it is not held by another thread within the given waiting time and the current thread has not
been interrupted.

- Join method


Which ways of synchronization do you know? Reentrant lock, synchronization, semaphors etc
How to make one thread to wait until another thread completes it's job and just after that it
will start himself?
What is deadlock and how to avoid deadlock?
What if you want to return some result from thread execution? (Callable interface)


20.......... What is http protocol
http  - it's a protocol to communicate between client (browser) and server (container of servlets - tomcat...)
It is used for dynamic requests. Http transactions are either request or a response.

- a single request or response line.
request line consists of http method (usually GET or POST) followed by document address and the
HTTP version number being used.

REQUEST:::
GET /contents.html HTTP/1.1
Headers
Body

RESPONSE:::

HTTP/1.1 200 OK
HEADERS
BODY

URL - http://example.com/some/page.html

URI - /some/page.html

21.......... What is Servlet in Java, What is JSP. Servlet lifecycle
https://www.javatpoint.com/life-cycle-of-a-servlet

22.......... What is REST
Representational State Transfer. It is an architectural style for distributing data between the network machines.
There are 2 pints - client and server. REST mostly works through the http protocol. REST request doesn't have state,
It knows anything about the previous requests. There is some strict agreement how to name the paths.

23.......... Which HTTP methods do you know?
GET, POST, PUT, HEAD, DELETE, PATCH, OPTIONS, CONNECT, TRACE

- which of them may have a body?

24.......... Spring
- What is spring Framework, it's features:
It's an open source development framework for enterprise Java. It's lightweight. It provides inversion of control,
it's based on POJOs. Spring Container supports bean's lifecycle.

- What is Dependency injection.
It's the concrete example of the Inversion Of Control. You just configure dependencies and Spring Container is
responsible for injecting them for you

- Types of Dependency injection
Constructor based (for required fields),
Setter based (for optional fields)

- Benefits of Dependency injection:
It minimizes the amount of code in your application. It makes your application easy to test.
Loose coupling. IOC containers support eager instantiation and lazy loading of services.

- What is AOP?
Programming technique that allows programmers to modularize crosscutting concerns.

- Which types of beans configuration do you prefer:
XML-based, Annotation-based, Java-based

- Bean scopes:
singleton (default), prototype, request, session, global session. Which is a default?

- What is autowiring
It's an ability of Spring Container to automatically find the objects for your dependencies. Types of autowiring:
byName, byType, constructor

- What is @Configuration annotation
It marks class a 'provider of beans'. With @Bean annotation you populate beans.

25.......... Spring Boot
- What is Spring Boot
It's a Spring module aimed to simplify the implementation of the java applications. Features:
auto dependency resolution, embedded http servers, auto-configuration.

It goes with a set of starters depending on which type of application you want to implement.

Also provides some metrics by default.

- How auto-configuration works?
Based on dependencies you added it enables needed Spring features, configures them properly for you.

- What is Spring Actuator?
Cool feature of Spring Boot which provides a lot of metrics and could be easily integrated with monitoring frameworks.

- What is @RequestMapping annotation for?
Maps request to method by value.

- What is @RestController annotation for?
It adds @ResponseBody 'feature' to the @Controller. So, it will return the json object

https://www.edureka.co/blog/interview-questions/spring-boot-interview-questions/

25. SQL Database, joins, indexes, what is relational database, what is primary key, foreign key,
Hibernate, Normalization.
- What is a foreign key?
A foreign key is an attribute or a set of attributes that references the primary key of some other table.
Basically, it is used to link together two tables.

- What is an index? And which types of indexes exist?
Index is a quick lookup table based on some field of set of fields. Could be Single, multi - column. Unique Index.

- What is the purpose of the Unique index?

- How many clustered indexes could be related to the table. What is the default clustered index?
One clustered index. Primary key by default. It's responsible for default sorting of the rows in table.

- Types of joins

- Forms of Normalization:
https://www.studytonight.com/dbms/database-normalization.php

- Difference between Delete and Truncate commands

- How would you filter the result of Group By clause?

- What is execution plan. Do you have experience improving performance of the sql query.


26.......... What is SOLID principles > https://medium.com/webbdev/solid-4ffc018077da
S: Single Responsibility Principle (Принцип единственной ответственности).
O: Open-Closed Principle (Принцип открытости-закрытости).
L: Liskov Substitution Principle (Принцип подстановки Барбары Лисков).
I: Interface Segregation Principle (Принцип разделения интерфейса).
D: Dependency Inversion Principle (Принцип инверсии зависимостей).

27.......... How memory is organized in Java. What is Heap and what is Stack
// Objects are stored in heap. Primitives, local variables, references to objects used in method are stored in stack.
//Stack memory consists of blocks which are allocated in LIFO order
// There are several parts in Heap depending on how many times object survived during the garbage collection.
//You may trigger System.gc() or Runtime.gc() but there is no guarantee jvm will clean at once.
https://javadevblog.com/chto-takoe-heap-i-stack-pamyat-v-java.html

25.......... Patterns
/home/dmitry/dev/projects/interviews/src/main/java/com/learn/patterns/creational/singleton/Singleton.java

8. IO.
/home/dmitry/dev/projects/interviews/src/main/java/com/learn/core/io/iotheory.txt
What is the difference between byte stream and Charachter stream?

14. Git

15. Maven

16. Logging

17. Checkstyle

18. Unit testing, integration testing

19. Http methods: GET, POST, which else.
What is servlet?
/home/dmitry/dev/projects/interviews/web/servletstheory/servleteQuestionsAndAnswers
What to do if you want something to be done before request gets to servlet?
What if you want to do something if session is expired?
What is jsp? how is it different to HTML? What is tag library. Have you ever created custom
tags?

20. Re-factoring

22. /home/dmitry/dev/projects/interviews/src/main/java/com/learn/interview_theory.txt

23. Do you know jquery? Java script?


Java questions:
What is difference between fail-fast and fail-safe?

Answer:
The Iterator's fail-safe property works with the clone of the underlying collection and thus,
it is not affected by any modification in the collection. All the collection classes in
java.util package are fail-fast, while the collection classes in java.util.concurrent are
fail-safe. Fail-fast iterators throw a ConcurrentModificationException, while fail-safe
iterator never throws such an exception.


Q21: What is a JavaBean exactly?
Topic: Java
Difficulty: ⭐⭐⭐
Answer:
Basically, a "Bean" follows the standart:

is a serializable object (that is, it implements java.io.Serializable, and does so correctly), that
has "properties" whose getters and setters are just methods with certain names (like, say, getFoo() is the getter for the "Foo" property), and
has a public 0-arg constructor (so it can be created at will and configured by setting its properties).
There is no syntactic difference between a JavaBean and another class - a class is a JavaBean if it follows the standards.

What is the volatile keyword useful for?

Answer:
volatile has semantics for memory visibility. Basically, the value of a volatile
field becomes visible to all readers (other threads in particular) after a write operation completes on it. Without volatile, readers could see some non-updated value.



